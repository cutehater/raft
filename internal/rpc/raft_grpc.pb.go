// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: raft.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RaftNode_AppendEntries_FullMethodName = "/RaftNode/AppendEntries"
	RaftNode_RequestVote_FullMethodName   = "/RaftNode/RequestVote"
)

// RaftNodeClient is the client API for RaftNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftNodeClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesIn, opts ...grpc.CallOption) (*AppendEntriesOut, error)
	RequestVote(ctx context.Context, in *RequestVoteIn, opts ...grpc.CallOption) (*RequestVoteOut, error)
}

type raftNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftNodeClient(cc grpc.ClientConnInterface) RaftNodeClient {
	return &raftNodeClient{cc}
}

func (c *raftNodeClient) AppendEntries(ctx context.Context, in *AppendEntriesIn, opts ...grpc.CallOption) (*AppendEntriesOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEntriesOut)
	err := c.cc.Invoke(ctx, RaftNode_AppendEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) RequestVote(ctx context.Context, in *RequestVoteIn, opts ...grpc.CallOption) (*RequestVoteOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVoteOut)
	err := c.cc.Invoke(ctx, RaftNode_RequestVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftNodeServer is the server API for RaftNode service.
// All implementations must embed UnimplementedRaftNodeServer
// for forward compatibility.
type RaftNodeServer interface {
	AppendEntries(context.Context, *AppendEntriesIn) (*AppendEntriesOut, error)
	RequestVote(context.Context, *RequestVoteIn) (*RequestVoteOut, error)
	mustEmbedUnimplementedRaftNodeServer()
}

// UnimplementedRaftNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRaftNodeServer struct{}

func (UnimplementedRaftNodeServer) AppendEntries(context.Context, *AppendEntriesIn) (*AppendEntriesOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRaftNodeServer) RequestVote(context.Context, *RequestVoteIn) (*RequestVoteOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRaftNodeServer) mustEmbedUnimplementedRaftNodeServer() {}
func (UnimplementedRaftNodeServer) testEmbeddedByValue()                  {}

// UnsafeRaftNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftNodeServer will
// result in compilation errors.
type UnsafeRaftNodeServer interface {
	mustEmbedUnimplementedRaftNodeServer()
}

func RegisterRaftNodeServer(s grpc.ServiceRegistrar, srv RaftNodeServer) {
	// If the following call pancis, it indicates UnimplementedRaftNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RaftNode_ServiceDesc, srv)
}

func _RaftNode_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftNode_AppendEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).AppendEntries(ctx, req.(*AppendEntriesIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftNode_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).RequestVote(ctx, req.(*RequestVoteIn))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftNode_ServiceDesc is the grpc.ServiceDesc for RaftNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RaftNode",
	HandlerType: (*RaftNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _RaftNode_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftNode_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
